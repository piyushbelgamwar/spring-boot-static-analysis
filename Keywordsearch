import java.io.*;
import java.nio.file.*;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class KeywordSearcher {
    
    // Restrict file types to only these extensions
    private static final Set<String> ALLOWED_FILE_EXTENSIONS = new HashSet<>(Arrays.asList(
            ".java", ".xml", ".yaml", ".yml", ".properties"
    ));
    
    private static final Object printLock = new Object();
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Get folder path from user
        System.out.println("Enter the root folder path to search in:");
        String rootFolderPath = scanner.nextLine().trim();
        
        // Get keyword from user
        System.out.println("Enter the keyword to search for in properties files (can be a key or value):");
        String keyword = scanner.nextLine().trim();
        
        // Ask if the search is for a key or a value or both
        System.out.println("Do you want to search for this keyword as: ");
        System.out.println("1. Property key");
        System.out.println("2. Property value");
        System.out.println("3. Both key and value");
        System.out.print("Enter your choice (1-3): ");
        int searchChoice = 3; // Default to both
        try {
            searchChoice = Integer.parseInt(scanner.nextLine().trim());
            if (searchChoice < 1 || searchChoice > 3) {
                searchChoice = 3; // Default to both if invalid input
                System.out.println("Invalid choice. Defaulting to search in both keys and values.");
            }
        } catch (NumberFormatException e) {
            System.out.println("Invalid input. Defaulting to search in both keys and values.");
        }
        
        File rootFolder = new File(rootFolderPath);
        if (!rootFolder.exists() || !rootFolder.isDirectory()) {
            System.out.println("Error: The specified path does not exist or is not a directory.");
            scanner.close();
            return;
        }
        
        String searchTypeDesc;
        switch (searchChoice) {
            case 1: searchTypeDesc = "property keys"; break;
            case 2: searchTypeDesc = "property values"; break;
            default: searchTypeDesc = "property keys and values"; break;
        }
        
        System.out.println("Searching for keyword: \"" + keyword + "\" in " + searchTypeDesc);
        System.out.println("Scanning for properties files in: " + rootFolderPath);
        System.out.println("----------------------------------------------------");
        
        // Create result file
        String resultFilePath = "property_search_results.txt";
        try (PrintWriter writer = new PrintWriter(new FileWriter(resultFilePath))) {
            writer.println("Search Results for keyword: \"" + keyword + "\" in " + searchTypeDesc);
            writer.println("Root folder: " + rootFolderPath);
            writer.println("Date: " + new Date());
            writer.println("----------------------------------------------------");
            
            // Start the search
            long startTime = System.currentTimeMillis();
            Map<String, ModuleSearchStats> moduleStats = new ConcurrentHashMap<>();
            List<SearchResult> results = searchKeywordInProperties(rootFolder, keyword, moduleStats, searchChoice);
            long endTime = System.currentTimeMillis();
            
            // Print module statistics
            System.out.println("\n----------------------------------------------------");
            System.out.println("MODULE STATISTICS");
            System.out.println("----------------------------------------------------");
            
            moduleStats.forEach((moduleName, stats) -> {
                System.out.println("Module: " + moduleName + " --> " + stats.getPropertiesFileCount() + " properties files scanned");
                writer.println("Module: " + moduleName + " --> " + stats.getPropertiesFileCount() + " properties files scanned");
            });
            
            // Sort results by module and file name
            results.sort(Comparator.comparing(SearchResult::getModuleName)
                    .thenComparing(SearchResult::getFileName));
            
            // Print and write results
            System.out.println("\n----------------------------------------------------");
            System.out.println("SEARCH RESULTS");
            System.out.println("----------------------------------------------------");
            
            if (results.isEmpty()) {
                System.out.println("No occurrences of the keyword found in property files.");
                writer.println("\nNo occurrences of the keyword found in property files.");
            } else {
                String currentModule = "";
                String currentFile = "";
                
                for (SearchResult result : results) {
                    // Print module header if we're in a new module
                    if (!result.getModuleName().equals(currentModule)) {
                        currentModule = result.getModuleName();
                        System.out.println("\nModule: " + currentModule);
                        writer.println("\nModule: " + currentModule);
                        currentFile = ""; // Reset current file when module changes
                    }
                    
                    // Print file header if we're in a new file
                    if (!result.getFileName().equals(currentFile)) {
                        currentFile = result.getFileName();
                        System.out.println("  File: " + currentFile);
                        writer.println("  File: " + currentFile);
                    }
                    
                    // Print the property key-value pair to console and file
                    System.out.println("    Line " + result.getLineNumber() + ": " + result.getPropertyKey() + " = " + result.getPropertyValue());
                    writer.println("    Line " + result.getLineNumber() + ": " + result.getPropertyKey() + " = " + result.getPropertyValue());
                    
                    // Print where the match was found (key or value)
                    String matchLocation = result.isMatchInKey() ? "Key match" : "Value match";
                    System.out.println("      (" + matchLocation + ")");
                    writer.println("      (" + matchLocation + ")");
                }
                
                System.out.println("\n----------------------------------------------------");
                System.out.println("Total occurrences found: " + results.size());
            }
            
            System.out.println("Search completed in " + (endTime - startTime) + " ms");
            writer.println("\n----------------------------------------------------");
            writer.println("Total occurrences found: " + results.size());
            writer.println("Search completed in " + (endTime - startTime) + " ms");
            
            System.out.println("Results have been saved to: " + new File(resultFilePath).getAbsolutePath());
            
        } catch (IOException e) {
            System.err.println("Error writing to result file: " + e.getMessage());
        } finally {
            scanner.close();
        }
    }
    
    private static List<SearchResult> searchKeywordInProperties(File rootFolder, String keyword, 
                                                              Map<String, ModuleSearchStats> moduleStats,
                                                              int searchChoice) {
        List<SearchResult> results = Collections.synchronizedList(new ArrayList<>());
        
        // Get all modules (directories) from the root folder
        File[] modules = rootFolder.listFiles(File::isDirectory);
        
        if (modules == null || modules.length == 0) {
            System.out.println("No modules found in the root directory.");
            return results;
        }
        
        // Create a thread pool for parallel processing
        int numThreads = Math.min(Runtime.getRuntime().availableProcessors(), modules.length);
        ExecutorService executor = Executors.newFixedThreadPool(numThreads);
        
        try {
            List<Future<?>> futures = new ArrayList<>();
            
            // Process each module in parallel
            for (File module : modules) {
                String moduleName = module.getName();
                moduleStats.put(moduleName, new ModuleSearchStats());
                
                futures.add(executor.submit(() -> {
                    try {
                        processModuleForProperties(module, keyword, results, moduleStats.get(moduleName), searchChoice);
                    } catch (Exception e) {
                        System.err.println("Error processing module " + moduleName + ": " + e.getMessage());
                    }
                }));
            }
            
            // Wait for all tasks to complete
            for (Future<?> future : futures) {
                try {
                    future.get();
                } catch (Exception e) {
                    System.err.println("Error in search task: " + e.getMessage());
                }
            }
        } finally {
            executor.shutdown();
            try {
                if (!executor.awaitTermination(60, TimeUnit.SECONDS)) {
                    executor.shutdownNow();
                }
            } catch (InterruptedException e) {
                executor.shutdownNow();
                Thread.currentThread().interrupt();
            }
        }
        
        return results;
    }
    
    private static void processModuleForProperties(File module, String keyword, List<SearchResult> results, 
                                                 ModuleSearchStats stats, int searchChoice) {
        String moduleName = module.getName();
        
        // Print the module name being searched
        synchronized(printLock) {
            System.out.println("Searching module: " + moduleName);
        }
        
        try {
            Files.walk(module.toPath())
                .filter(Files::isRegularFile)
                .filter(path -> path.toString().toLowerCase().endsWith(".properties"))
                .forEach(path -> {
                    stats.incrementPropertiesFileCount();
                    try {
                        processPropertiesFile(path.toFile(), moduleName, keyword, results, searchChoice);
                    } catch (IOException e) {
                        System.err.println("Error processing file " + path + ": " + e.getMessage());
                    }
                });
        } catch (IOException e) {
            System.err.println("Error walking directory " + module + ": " + e.getMessage());
        }
    }
    
    private static void processPropertiesFile(File file, String moduleName, String keyword, 
                                            List<SearchResult> results, int searchChoice) 
            throws IOException {
        String fileName = file.getName();
        boolean searchInKeys = searchChoice == 1 || searchChoice == 3;
        boolean searchInValues = searchChoice == 2 || searchChoice == 3;
        
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(
                new FileInputStream(file), StandardCharsets.UTF_8))) {
            
            String line;
            int lineNumber = 0;
            StringBuilder continuedLine = new StringBuilder();
            int startLineNumber = 0;
            
            while ((line = reader.readLine()) != null) {
                lineNumber++;
                
                // Skip comments and empty lines
                if (line.trim().startsWith("#") || line.trim().isEmpty()) {
                    continue;
                }
                
                // Handle line continuations (backslash at end of line)
                if (line.trim().endsWith("\\")) {
                    if (continuedLine.length() == 0) {
                        // Start of a multi-line property
                        continuedLine.append(line.substring(0, line.length() - 1));
                        startLineNumber = lineNumber;
                    } else {
                        // Continuation of a multi-line property
                        continuedLine.append(line.substring(0, line.length() - 1));
                    }
                    continue;
                } else if (continuedLine.length() > 0) {
                    // End of a multi-line property
                    continuedLine.append(line);
                    line = continuedLine.toString();
                    continuedLine = new StringBuilder();
                }
                
                // Process the property line
                int equalsPos = line.indexOf('=');
                if (equalsPos > 0) {
                    String key = line.substring(0, equalsPos).trim();
                    String value = equalsPos < line.length() - 1 ? 
                                  line.substring(equalsPos + 1).trim() : "";
                    
                    boolean keyMatch = searchInKeys && key.contains(keyword);
                    boolean valueMatch = searchInValues && value.contains(keyword);
                    
                    if (keyMatch || valueMatch) {
                        results.add(new SearchResult(
                            moduleName,
                            fileName,
                            continuedLine.length() > 0 ? startLineNumber : lineNumber,
                            key,
                            value,
                            keyMatch
                        ));
                    }
                }
            }
        }
    }
    
    static class ModuleSearchStats {
        private final AtomicInteger propertiesFileCount = new AtomicInteger(0);
        
        public void incrementPropertiesFileCount() {
            propertiesFileCount.incrementAndGet();
        }
        
        public int getPropertiesFileCount() {
            return propertiesFileCount.get();
        }
    }
    
    static class SearchResult {
        private final String moduleName;
        private final String fileName;
        private final int lineNumber;
        private final String propertyKey;
        private final String propertyValue;
        private final boolean matchInKey;
        
        public SearchResult(String moduleName, String fileName, int lineNumber, 
                           String propertyKey, String propertyValue, boolean matchInKey) {
            this.moduleName = moduleName;
            this.fileName = fileName;
            this.lineNumber = lineNumber;
            this.propertyKey = propertyKey;
            this.propertyValue = propertyValue;
            this.matchInKey = matchInKey;
        }
        
        public String getModuleName() {
            return moduleName;
        }
        
        public String getFileName() {
            return fileName;
        }
        
        public int getLineNumber() {
            return lineNumber;
        }
        
        public String getPropertyKey() {
            return propertyKey;
        }
        
        public String getPropertyValue() {
            return propertyValue;
        }
        
        public boolean isMatchInKey() {
            return matchInKey;
        }
    }
}
