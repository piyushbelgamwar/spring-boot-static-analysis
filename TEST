public ValidationErrorResponse performAsyncSchemaValidation(InputStream inputStream, DataProcessingInfo dpInfo) {
    List<ValidationError> validationErrorsList = new ArrayList<>();
    
    // First, check if the input stream is null
    if (inputStream == null) {
        ValidationError validationError = new ValidationError();
        validationError.setType("Schema");
        validationError.setDescription("No XML content provided - input stream is null");
        validationError.setElement("N/A");
        validationError.setElementRef("N/A");
        validationErrorsList.add(validationError);
        
        ValidationErrorResponse response = new ValidationErrorResponse();
        response.setValidationErrors(validationErrorsList);
        return response;
    }
    
    // Make input stream buffered and markable if it isn't already
    BufferedInputStream bufferedInputStream;
    if (inputStream instanceof BufferedInputStream) {
        bufferedInputStream = (BufferedInputStream) inputStream;
    } else {
        bufferedInputStream = new BufferedInputStream(inputStream);
    }
    
    try {
        // Mark the stream so we can reset after checking
        bufferedInputStream.mark(Integer.MAX_VALUE);
        
        // Check for elements with only whitespace
        if (detectWhitespaceOnlyElements(bufferedInputStream)) {
            ValidationError validationError = new ValidationError();
            validationError.setType("Schema");
            validationError.setDescription("Document contains elements with only whitespace content");
            validationError.setElement("Document");
            validationError.setElementRef("N/A");
            validationErrorsList.add(validationError);
        }
        
        // Reset the stream for Saxon validation
        bufferedInputStream.reset();
    } catch (Exception e) {
        LOGGER.error("Error during pre-validation checks", e);
        // Don't throw here, continue with Saxon validation
    }
    
    // Continue with the original Saxon validation logic
    String dataItemWithVersion;
    if (dpInfo.getFilePath() == null) {
        dataItemWithVersion = this.dataItemVersionService.getDataItemVersionFromUrlPath(dpInfo);
    } else {
        dataItemWithVersion = dpInfo.getFilePath();
    }

    LOGGER.info("Data Item Version is {}", dataItemWithVersion);

    try {
        System.setProperty("javax.xml.transform.TransformerFactory", "com.saxonica.config.EnterpriseTransformerFactory");
        TransformerFactory transformerFactory = CommonUtility.getTransformerFactory();
        String stringSchemaFile = this.dataItemVersionService.getStringFileNameByVersionAndExtension(dataItemWithVersion, this.schemaFileSuffix, dpInfo);
        LOGGER.info("stringSchemaFile = {}", stringSchemaFile);
        StreamSource specific = new StreamSource(this.getClass().getClassLoader().getResource(stringSchemaFile).toExternalForm());
        ((EnterpriseTransformerFactory)transformerFactory).addSchema(specific);
        Transformer trans = transformerFactory.newTransformer();
        StreamSource source = new StreamSource(bufferedInputStream);
        SAXResult sink = new SAXResult(new DefaultHandler());
        trans.setErrorListener(new SchemaErrorListener(validationErrorsList, dpInfo));
        trans.transform(source, sink);
    } catch (Exception var12) {
        Exception e = var12;
        LOGGER.error("Error Processing Schema Validation ", e);
        throw new SchemaValidationException("Error in schema validation", e);
    }
    
    ValidationErrorResponse response = new ValidationErrorResponse();
    if (!validationErrorsList.isEmpty()) {
        response.setValidationErrors(validationErrorsList);
    }
    return response;
}

// Add this helper method to your class
private boolean detectWhitespaceOnlyElements(InputStream inputStream) {
    try {
        SAXParserFactory factory = SAXParserFactory.newInstance();
        factory.setNamespaceAware(true);
        SAXParser parser = factory.newSAXParser();
        
        final boolean[] foundWhitespaceOnly = {false};
        
        DefaultHandler handler = new DefaultHandler() {
            private boolean inElement = false;
            private String currentElement = null;
            private boolean hasOnlyWhitespace = false;
            private boolean hasContent = false;
            
            @Override
            public void startElement(String uri, String localName, String qName, Attributes attributes) {
                inElement = true;
                currentElement = qName;
                hasOnlyWhitespace = false;
                hasContent = false;
            }
            
            @Override
            public void characters(char[] ch, int start, int length) {
                if (inElement) {
                    String content = new String(ch, start, length);
                    if (content.length() > 0) {
                        if (content.trim().isEmpty()) {
                            hasOnlyWhitespace = true;
                        } else {
                            hasContent = true;
                        }
                    }
                }
            }
            
            @Override
            public void endElement(String uri, String localName, String qName) {
                if (inElement && hasOnlyWhitespace && !hasContent) {
                    foundWhitespaceOnly[0] = true;
                    LOGGER.info("Found element with only whitespace: {}", currentElement);
                }
                inElement = false;
                currentElement = null;
            }
        };
        
        parser.parse(new InputSource(inputStream), handler);
        return foundWhitespaceOnly[0];
    } catch (Exception e) {
        LOGGER.error("Error checking for whitespace-only elements", e);
        return false;
    }
}
