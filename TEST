```java
public ValidationErrorResponse performValidation(Object dataItem, DataProcessingInfo dpInfo) {
    List<ValidationError> validationErrorsList = new ArrayList<>();
    
    try {
        // 1. Get schema file specific to dataItem
        String dataItemWithVersion;
        if (dpInfo.getFilePath() == null)
            dataItemWithVersion = dataItemVersionService.getDataItemVersionFromUrlPath(dpInfo);
        else
            dataItemWithVersion = dpInfo.getFilePath();
        
        LOGGER.info("Data Item Version is {}", dataItemWithVersion);
        
        // 2. Handle input as stream
        InputStream xmlInputStream = null;
        if (dpInfo.getXmlContent() != null && StringUtils.isNotBlank(dpInfo.getXmlContent())) {
            xmlInputStream = new ByteArrayInputStream(dpInfo.getXmlContent().getBytes(StandardCharsets.UTF_8));
        } else if (dataItem instanceof InputStream) {
            xmlInputStream = (InputStream) dataItem;
        } else {
            // Stream-based conversion
            PipedOutputStream pos = new PipedOutputStream();
            PipedInputStream pis = new PipedInputStream(pos);
            
            new Thread(() -> {
                try {
                    XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(pos, "UTF-8");
                    // Custom serialization logic based on your object model
                    serializeToXml(writer, dataItem);
                    writer.close();
                    pos.close();
                } catch (Exception e) {
                    LOGGER.error("Error in XML streaming conversion", e);
                }
            }).start();
            
            xmlInputStream = pis;
        }
        
        // 3. Validate using stream approach
        System.setProperty("javax.xml.transform.TransformerFactory", 
                          "com.saxonica.config.EnterpriseTransformerFactory");
        TransformerFactory transformerFactory = CommonUtility.getTransformerFactory();
        
        // Schema setup
        StreamSource common;
        StreamSource specific;
        String stringSchemaFile = dataItemVersionService.getStringFileNameByVersionAndExtension(dataItemWithVersion, schemaFileSuffix, dpInfo);
        LOGGER.info("stringSchemaFile = {}", stringSchemaFile);
        
        if (SchemaConstants.PSD_HANDBOOK_REF.contains(dpInfo.getHandbookReference()) && StringUtils.isNotEmpty(dpInfo.getCommonSchemaFilePath())) {
            specific = new StreamSource(getClass().getClassLoader().getResource(stringSchemaFile).toExternalForm());
            common = getFileFromResourceAsStream(dpInfo.getCommonSchemaFilePath());
            ((EnterpriseTransformerFactory) transformerFactory).addSchema(common);
            ((EnterpriseTransformerFactory) transformerFactory).addSchema(specific);
        } else {
            specific = new StreamSource(getClass().getClassLoader().getResource(stringSchemaFile).toExternalForm());
            ((EnterpriseTransformerFactory) transformerFactory).addSchema(specific);
        }
        
        Transformer trans = transformerFactory.newTransformer();
        
        // Stream-based reading
        String xmlContentString = IOUtils.toString(xmlInputStream, StandardCharsets.UTF_8);
        InputStream inputStream = new ByteArrayInputStream(xmlContentString.getBytes(StandardCharsets.UTF_8));
        Reader xmlContent = new InputStreamReader(inputStream, StandardCharsets.UTF_8);
        LOGGER.info("Radar Content sync: " + xmlContent);
        
        StreamSource source = new StreamSource(xmlContent);
        SAXResult sink = new SAXResult(new DefaultHandler());
        trans.setErrorListener(new SchemaErrorListener(validationErrorsList, dpInfo));
        trans.transform(source, sink);
        
    } catch (Exception e) {
        LOGGER.error("Error Processing Schema Validation ", e);
        throw new SchemaValidationException("Error in schema validation", e);
    }
    
    if (!validationErrorsList.isEmpty()) {
        return new ValidationErrorResponse(validationErrorsList);
    }
    
    LOGGER.info("Schema level validation completed");
    return null;
}

// Helper method to serialize object to XML via streaming
private void serializeToXml(XMLStreamWriter writer, Object dataItem) throws Exception {
    // Implement based on your object structure
    writer.writeStartDocument("UTF-8", "1.0");
    writer.writeStartElement("root");
    
    // Add object serialization logic here
    // For example, if dataItem is a custom class with fields to serialize
    
    writer.writeEndElement();
    writer.writeEndDocument();
    writer.flush();
}
```