public ValidationErrorResponse performAsyncSchemaValidation(InputStream inputStream, DataProcessingInfo dpInfo) {
    List<ValidationError> validationErrorsList = new ArrayList();
    String dataItemWithVersion;
    if (dpInfo.getFilePath() == null) {
        dataItemWithVersion = this.dataItemVersionService.getDataItemVersionFromUrlPath(dpInfo);
    } else {
        dataItemWithVersion = dpInfo.getFilePath();
    }

    LOGGER.info("Data Item Version is {}", dataItemWithVersion);

    try {
        // Convert InputStream to Reader to match the behavior of performValidation
        Reader xmlContentReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);
        
        System.setProperty("javax.xml.transform.TransformerFactory", "com.saxonica.config.EnterpriseTransformerFactory");
        TransformerFactory transformerFactory = CommonUtility.getTransformerFactory();
        String stringSchemaFile = this.dataItemVersionService.getStringFileNameByVersionAndExtension(dataItemWithVersion, this.schemaFileSuffix, dpInfo);
        LOGGER.info("stringSchemaFile = {}", stringSchemaFile);
        
        // Add common schema handling as in performValidation
        StreamSource specific;
        if (SchemaConstants.PSD_HANDBOOK_REF.contains(dpInfo.getHandbookReference()) && 
            StringUtils.isNotEmpty(dpInfo.getCommonSchemaFilePath())) {
            specific = new StreamSource(this.getClass().getClassLoader().getResource(stringSchemaFile).toExternalForm());
            StreamSource common = this.getFileFromResourceAsStream(dpInfo.getCommonSchemaFilePath());
            ((EnterpriseTransformerFactory)transformerFactory).addSchema(common);
            ((EnterpriseTransformerFactory)transformerFactory).addSchema(specific);
        } else {
            specific = new StreamSource(this.getClass().getClassLoader().getResource(stringSchemaFile).toExternalForm());
            ((EnterpriseTransformerFactory)transformerFactory).addSchema(specific);
        }
        
        Transformer trans = transformerFactory.newTransformer();
        
        // Create StreamSource from Reader instead of InputStream
        StreamSource source = new StreamSource(xmlContentReader);
        
        SAXResult sink = new SAXResult(new DefaultHandler());
        trans.setErrorListener(new SchemaErrorListener(validationErrorsList, dpInfo));
        trans.transform(source, sink);
    } catch (Exception var12) {
        Exception e = var12;
        LOGGER.error("Error Processing Schema Validation ", e);
        throw new SchemaValidationException("Error in schema validation", e);
    }

    if (!validationErrorsList.isEmpty()) {
        return new ValidationErrorResponse(validationErrorsList);
    } else {
        LOGGER.info("Schema level validation completed");
        return null;
    }
}
