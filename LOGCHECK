import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

public class GitLabCloner {
    // Base directory where repositories will be cloned
    private static final String BASE_DIR = "/path/to/your/dedicated/java/folder";
    
    // GitLab base URL
    private static final String GITLAB_URL = "https://gitlab.example.com";
    
    // Groups to try (in order of preference)
    private static final List<String> GROUP_PATHS = List.of("FDC/", "DCP/");
    
    // Optional: Personal access token for private repositories
    // private static final String GITLAB_TOKEN = "your_personal_access_token";
    
    public static void main(String[] args) {
        // Option 1: Define the list of module names directly
        var modules = List.of(
            "module1",
            "module2",
            "module3",
            // ... add all 108 module names here
            "module108"
        );
        
        // Option 2: Read from a string (uncomment if you have a string with module names)
        // String moduleString = "module1 module2 module3 ... module108";
        // var modules = Arrays.stream(moduleString.split("\\s+")).toList();
        
        // Option 3: Read from a file (uncomment if you have a file with module names)
        // var modules = readModulesFromFile("modules.txt");
        
        // Create base directory if it doesn't exist
        var baseDir = Path.of(BASE_DIR);
        try {
            Files.createDirectories(baseDir);
        } catch (IOException e) {
            System.err.println("Error creating base directory: " + e.getMessage());
            return;
        }
        
        // Clone each repository
        modules.forEach(GitLabCloner::cloneRepository);
        
        System.out.println("All modules have been cloned.");
    }
    
    private static void cloneRepository(String moduleName) {
        System.out.println("Cloning " + moduleName + "...");
        
        // Create directory for the module
        var moduleDir = Path.of(BASE_DIR, moduleName);
        
        var success = false;
        
        // Try each group path until successful
        for (var groupPath : GROUP_PATHS) {
            try {
                // Clean up any previous attempt
                if (Files.exists(moduleDir)) {
                    deleteDirectoryRecursively(moduleDir);
                }
                Files.createDirectories(moduleDir);
                
                System.out.println("Trying to clone from " + groupPath + moduleName + "...");
                
                // Build the git clone command
                var repoUrl = GITLAB_URL + "/" + groupPath + moduleName + ".git";
                var processBuilder = new ProcessBuilder();
                
                // For private repositories with token:
                // processBuilder.command("git", "clone", repoUrl, 
                //                moduleDir.toString(), "--config", 
                //                "http.extraheader=PRIVATE-TOKEN: " + GITLAB_TOKEN);
                
                // Without token:
                processBuilder.command("git", "clone", repoUrl, moduleDir.toString());
                
                // Redirect error output to a file to suppress it from console
                var errorLog = Path.of("git_error.log").toFile();
                processBuilder.redirectError(errorLog);
                
                // Execute the command
                var process = processBuilder.start();
                var completed = process.waitFor(2, TimeUnit.MINUTES); // Add timeout
                
                if (completed && process.exitValue() == 0) {
                    System.out.println("Successfully cloned " + moduleName + " from " + groupPath);
                    success = true;
                    break; // Exit the loop if successful
                } else {
                    System.out.println("Module not found in " + groupPath + ", trying next group...");
                }
                
            } catch (IOException | InterruptedException e) {
                System.err.println("Error trying to clone from " + groupPath + ": " + e.getMessage());
            }
        }
        
        // Final success/failure message
        if (!success) {
            System.out.println("Failed to clone " + moduleName + " from any group");
            // Clean up empty directory if all attempts failed
            try {
                Files.deleteIfExists(moduleDir);
            } catch (IOException e) {
                System.err.println("Failed to clean up directory: " + e.getMessage());
            }
        }
    }
    
    // Helper method to delete a directory recursively using Java NIO
    private static void deleteDirectoryRecursively(Path path) throws IOException {
        if (Files.exists(path)) {
            Files.walk(path)
                 .sorted((a, b) -> -a.compareTo(b)) // Reverse order so children are deleted before parents
                 .forEach(p -> {
                     try {
                         Files.delete(p);
                     } catch (IOException e) {
                         System.err.println("Failed to delete: " + p + " - " + e.getMessage());
                     }
                 });
        }
    }
    
    // Helper method to read module names from a file (for Option 3)
    private static List<String> readModulesFromFile(String filename) {
        try {
            return Files.lines(Path.of(filename))
                       .map(String::trim)
                       .filter(line -> !line.isEmpty())
                       .collect(Collectors.toList());
        } catch (IOException e) {
            System.err.println("Error reading module names from file: " + e.getMessage());
            return List.of(); // Return empty list on error
        }
    }
}
