import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

public class GitLabCloner {
    // Base directory where repositories will be cloned
    private static final String BASE_DIR = "/path/to/your/dedicated/java/folder";
    
    // GitLab base URL
    private static final String GITLAB_URL = "https://gitlab.example.com";
    
    // Groups to try (in order of preference)
    private static final String[] GROUP_PATHS = {"FDC/", "DCP/"};
    
    // Optional: Personal access token for private repositories
    // private static final String GITLAB_TOKEN = "your_personal_access_token";
    
    public static void main(String[] args) {
        // Option 1: Define the list of 108 module names directly
        List<String> modules = Arrays.asList(
            "module1",
            "module2",
            "module3",
            // ... add all 108 module names here
            "module108"
        );
        
        // Option 2: Read from a string (uncomment if you have a string with module names)
        // String moduleString = "module1 module2 module3 ... module108";
        // List<String> modules = Arrays.asList(moduleString.split("\\s+"));
        
        // Option 3: Read from a file (uncomment if you have a file with module names)
        // List<String> modules = readModulesFromFile("modules.txt");
        
        // Create base directory if it doesn't exist
        File baseDir = new File(BASE_DIR);
        if (!baseDir.exists()) {
            baseDir.mkdirs();
        }
        
        // Clone each repository
        for (String module : modules) {
            cloneRepository(module);
        }
        
        System.out.println("All modules have been cloned.");
    }
    
    private static void cloneRepository(String moduleName) {
        System.out.println("Cloning " + moduleName + "...");
        
        // Create directory for the module
        File moduleDir = new File(BASE_DIR, moduleName);
        if (!moduleDir.exists()) {
            moduleDir.mkdirs();
        }
        
        boolean success = false;
        
        // Try each group path until successful
        for (String groupPath : GROUP_PATHS) {
            try {
                System.out.println("Trying to clone from " + groupPath + moduleName + "...");
                
                // Build the git clone command
                ProcessBuilder processBuilder = new ProcessBuilder();
                
                // For private repositories with token:
                // processBuilder.command("git", "clone", GITLAB_URL + "/" + groupPath + moduleName + ".git", 
                //                        moduleDir.getAbsolutePath(), "--config", 
                //                        "http.extraheader=PRIVATE-TOKEN: " + GITLAB_TOKEN);
                
                // Without token:
                processBuilder.command("git", "clone", GITLAB_URL + "/" + groupPath + moduleName + ".git", 
                                      moduleDir.getAbsolutePath());
                
                // Redirect error output to a file to suppress it from console
                File errorLog = new File("git_error.log");
                processBuilder.redirectError(errorLog);
                
                // Execute the command
                Process process = processBuilder.start();
                int exitCode = process.waitFor();
                
                if (exitCode == 0) {
                    System.out.println("Successfully cloned " + moduleName + " from " + groupPath);
                    success = true;
                    break;  // Exit the loop if successful
                } else {
                    System.out.println("Module not found in " + groupPath + ", trying next group...");
                    // Clean up the partially created directory for the next attempt
                    deleteDirectory(moduleDir);
                    moduleDir.mkdirs();
                }
                
            } catch (IOException | InterruptedException e) {
                System.err.println("Error trying to clone from " + groupPath + ": " + e.getMessage());
            }
        }
        
        // Final success/failure message
        if (!success) {
            System.out.println("Failed to clone " + moduleName + " from any group");
            // Clean up empty directory if all attempts failed
            moduleDir.delete();
        }
    }
    
    // Helper method to delete a directory recursively
    private static void deleteDirectory(File directory) {
        if (directory.exists()) {
            File[] files = directory.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.isDirectory()) {
                        deleteDirectory(file);
                    } else {
                        file.delete();
                    }
                }
            }
            directory.delete();
        }
    }
    }
    
    // Helper method to read module names from a file (for Option 3)
    private static List<String> readModulesFromFile(String filename) {
        List<String> modules = new java.util.ArrayList<>();
        try {
            java.nio.file.Files.lines(java.nio.file.Paths.get(filename))
                .map(String::trim)
                .filter(line -> !line.isEmpty())
                .forEach(modules::add);
        } catch (IOException e) {
            System.err.println("Error reading module names from file: " + e.getMessage());
        }
        return modules;
    }
}
