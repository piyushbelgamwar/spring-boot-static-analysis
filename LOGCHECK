import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

public class GitLabCloner {
    // Base directory where repositories will be cloned
    private static final String BASE_DIR = "/path/to/your/dedicated/java/folder";
    
    // GitLab base URL
    private static final String GITLAB_URL = "https://gitlab.example.com";
    
    // Group or organization path (if modules are in a specific group)
    // For example, if your repo URL is gitlab.example.com/my-group/module1, then use:
    private static final String GROUP_PATH = "my-group/";
    // Leave empty if modules are at the root level
    // private static final String GROUP_PATH = "";
    
    // Optional: Personal access token for private repositories
    // private static final String GITLAB_TOKEN = "your_personal_access_token";
    
    public static void main(String[] args) {
        // Option 1: Define the list of 108 module names directly
        List<String> modules = Arrays.asList(
            "module1",
            "module2",
            "module3",
            // ... add all 108 module names here
            "module108"
        );
        
        // Option 2: Read from a string (uncomment if you have a string with module names)
        // String moduleString = "module1 module2 module3 ... module108";
        // List<String> modules = Arrays.asList(moduleString.split("\\s+"));
        
        // Option 3: Read from a file (uncomment if you have a file with module names)
        // List<String> modules = readModulesFromFile("modules.txt");
        
        // Create base directory if it doesn't exist
        File baseDir = new File(BASE_DIR);
        if (!baseDir.exists()) {
            baseDir.mkdirs();
        }
        
        // Clone each repository
        for (String module : modules) {
            cloneRepository(module);
        }
        
        System.out.println("All modules have been cloned.");
    }
    
    private static void cloneRepository(String moduleName) {
        try {
            System.out.println("Cloning " + moduleName + "...");
            
            // Create directory for the module
            File moduleDir = new File(BASE_DIR, moduleName);
            if (!moduleDir.exists()) {
                moduleDir.mkdirs();
            }
            
            // Build the git clone command
            ProcessBuilder processBuilder = new ProcessBuilder();
            
            // For private repositories with token:
            // processBuilder.command("git", "clone", GITLAB_URL + "/" + GROUP_PATH + moduleName + ".git", 
            //                        moduleDir.getAbsolutePath(), "--config", 
            //                        "http.extraheader=PRIVATE-TOKEN: " + GITLAB_TOKEN);
            
            // Without token:
            processBuilder.command("git", "clone", GITLAB_URL + "/" + GROUP_PATH + moduleName + ".git", 
                                  moduleDir.getAbsolutePath());
            
            // Redirect output to console
            processBuilder.inheritIO();
            
            // Execute the command
            Process process = processBuilder.start();
            int exitCode = process.waitFor();
            
            if (exitCode == 0) {
                System.out.println("Successfully cloned " + moduleName);
            } else {
                System.out.println("Failed to clone " + moduleName);
            }
            
        } catch (IOException | InterruptedException e) {
            System.err.println("Error cloning " + moduleName + ": " + e.getMessage());
        }
    }
    
    // Helper method to read module names from a file (for Option 3)
    private static List<String> readModulesFromFile(String filename) {
        List<String> modules = new java.util.ArrayList<>();
        try {
            java.nio.file.Files.lines(java.nio.file.Paths.get(filename))
                .map(String::trim)
                .filter(line -> !line.isEmpty())
                .forEach(modules::add);
        } catch (IOException e) {
            System.err.println("Error reading module names from file: " + e.getMessage());
        }
        return modules;
    }
}
