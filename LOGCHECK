import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.util.ReflectionTestUtils;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class FeedbackDaoImplTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    @InjectMocks
    private FeedbackDaoImpl feedbackDao;

    @Captor
    private ArgumentCaptor<Object[]> parametersCaptor;

    @Captor
    private ArgumentCaptor<MapSqlParameterSource> namedParametersCaptor;

    private FeedbackData testFeedbackData;
    private Timestamp currentTimestamp;

    @BeforeEach
    public void setUp() {
        // Set up the current timestamp for testing
        currentTimestamp = new Timestamp(Instant.now().toEpochMilli());
        
        // Create test feedback data
        testFeedbackData = new FeedbackData();
        testFeedbackData.setFeedbackId(1L);
        testFeedbackData.setFirmDataItemId(100L);
        testFeedbackData.setReportId(null);
        testFeedbackData.setFirmReferenceNumber("FR12345");
        testFeedbackData.setHandBookReference("HB-REF-001");
        testFeedbackData.setFirmDataItemName("Test Handbook Item");
        testFeedbackData.setFeedbackText("This is test feedback");
        testFeedbackData.setSubmittedBy("testUser");
        testFeedbackData.setSubmittedDate(currentTimestamp);
        
        // Set any additional properties needed for the DAO under test
        ReflectionTestUtils.setField(feedbackDao, "feedbackTableName", "FEEDBACK_DATA");
    }

    // --------------- CREATE OPERATIONS ---------------

    @Test
    public void testSaveFeedback_Success() {
        // Arrange
        when(jdbcTemplate.update(anyString(), any(Object[].class))).thenReturn(1);

        // Act
        boolean result = feedbackDao.saveFeedback(testFeedbackData);

        // Assert
        assertTrue(result);
        verify(jdbcTemplate).update(contains("INSERT INTO FEEDBACK_DATA"), parametersCaptor.capture());
        
        Object[] capturedParams = parametersCaptor.getValue();
        assertEquals(testFeedbackData.getFirmDataItemId(), capturedParams[0]);
        assertEquals(testFeedbackData.getReportId(), capturedParams[1]);
        assertEquals(testFeedbackData.getFirmReferenceNumber(), capturedParams[2]);
        assertEquals(testFeedbackData.getHandBookReference(), capturedParams[3]);
        assertEquals(testFeedbackData.getFeedbackText(), capturedParams[4]);
        assertEquals(testFeedbackData.getSubmittedBy(), capturedParams[5]);
        assertEquals(testFeedbackData.getSubmittedDate(), capturedParams[6]);
    }

    @Test
    public void testSaveFeedback_DatabaseError() {
        // Arrange
        when(jdbcTemplate.update(anyString(), any(Object[].class)))
            .thenThrow(new RuntimeException("Database error"));

        // Act & Assert
        Exception exception = assertThrows(RuntimeException.class, () -> {
            feedbackDao.saveFeedback(testFeedbackData);
        });
        
        assertTrue(exception.getMessage().contains("Database error"));
        verify(jdbcTemplate).update(contains("INSERT INTO FEEDBACK_DATA"), any(Object[].class));
    }

    // --------------- READ OPERATIONS ---------------

    @Test
    public void testGetFeedbackById_Found() throws SQLException {
        // Arrange - Mock ResultSet
        ResultSet mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getLong("FEEDBACK_ID")).thenReturn(1L);
        when(mockResultSet.getLong("FIRM_DATA_ITEM_ID")).thenReturn(100L);
        when(mockResultSet.getObject("REPORT_ID")).thenReturn(null);
        when(mockResultSet.getString("FIRM_REFERENCE_NUMBER")).thenReturn("FR12345");
        when(mockResultSet.getString("HANDBOOK_REFERENCE")).thenReturn("HB-REF-001");
        when(mockResultSet.getString("FIRM_DATA_ITEM_NAME")).thenReturn("Test Handbook Item");
        when(mockResultSet.getString("FEEDBACK_TEXT")).thenReturn("This is test feedback");
        when(mockResultSet.getString("SUBMITTED_BY")).thenReturn("testUser");
        when(mockResultSet.getTimestamp("SUBMITTED_DATE")).thenReturn(currentTimestamp);
        
        when(jdbcTemplate.queryForObject(anyString(), any(Object[].class), any(RowMapper.class)))
            .thenAnswer(invocation -> {
                RowMapper<FeedbackData> mapper = invocation.getArgument(2);
                return mapper.mapRow(mockResultSet, 1);
            });

        // Act
        Optional<FeedbackData> result = feedbackDao.getFeedbackById(1L);

        // Assert
        assertTrue(result.isPresent());
        assertEquals(1L, result.get().getFeedbackId());
        assertEquals(100L, result.get().getFirmDataItemId());
        assertEquals("FR12345", result.get().getFirmReferenceNumber());
        assertEquals("This is test feedback", result.get().getFeedbackText());
        
        verify(jdbcTemplate).queryForObject(contains("SELECT * FROM FEEDBACK_DATA WHERE FEEDBACK_ID = ?"), 
            eq(new Object[]{1L}), any(RowMapper.class));
    }

    @Test
    public void testGetFeedbackById_NotFound() {
        // Arrange
        when(jdbcTemplate.queryForObject(anyString(), any(Object[].class), any(RowMapper.class)))
            .thenThrow(new org.springframework.dao.EmptyResultDataAccessException("No results found", 1));

        // Act
        Optional<FeedbackData> result = feedbackDao.getFeedbackById(999L);

        // Assert
        assertFalse(result.isPresent());
        verify(jdbcTemplate).queryForObject(contains("SELECT * FROM FEEDBACK_DATA WHERE FEEDBACK_ID = ?"), 
            eq(new Object[]{999L}), any(RowMapper.class));
    }

    @Test
    public void testGetFeedbackByFirmDataItemId() throws SQLException {
        // Arrange - Mock ResultSet
        ResultSet mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getLong("FEEDBACK_ID")).thenReturn(1L);
        when(mockResultSet.getLong("FIRM_DATA_ITEM_ID")).thenReturn(100L);
        when(mockResultSet.getObject("REPORT_ID")).thenReturn(null);
        when(mockResultSet.getString("FIRM_REFERENCE_NUMBER")).thenReturn("FR12345");
        when(mockResultSet.getString("FEEDBACK_TEXT")).thenReturn("This is test feedback");
        
        when(jdbcTemplate.query(anyString(), any(Object[].class), any(RowMapper.class)))
            .thenAnswer(invocation -> {
                RowMapper<FeedbackData> mapper = invocation.getArgument(2);
                return Collections.singletonList(mapper.mapRow(mockResultSet, 1));
            });

        // Act
        List<FeedbackData> results = feedbackDao.getFeedbackByFirmDataItemId(100L);

        // Assert
        assertFalse(results.isEmpty());
        assertEquals(1, results.size());
        assertEquals(1L, results.get(0).getFeedbackId());
        assertEquals(100L, results.get(0).getFirmDataItemId());
        assertEquals("This is test feedback", results.get(0).getFeedbackText());
        
        verify(jdbcTemplate).query(contains("SELECT * FROM FEEDBACK_DATA WHERE FIRM_DATA_ITEM_ID = ?"), 
            eq(new Object[]{100L}), any(RowMapper.class));
    }

    @Test
    public void testGetFeedbackByReportId() throws SQLException {
        // Arrange - Mock ResultSet
        ResultSet mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getLong("FEEDBACK_ID")).thenReturn(2L);
        when(mockResultSet.getLong("REPORT_ID")).thenReturn(200L);
        when(mockResultSet.getObject("FIRM_DATA_ITEM_ID")).thenReturn(null);
        when(mockResultSet.getString("FIRM_REFERENCE_NUMBER")).thenReturn("FR12345");
        when(mockResultSet.getString("FEEDBACK_TEXT")).thenReturn("Report feedback");
        
        when(jdbcTemplate.query(anyString(), any(Object[].class), any(RowMapper.class)))
            .thenAnswer(invocation -> {
                RowMapper<FeedbackData> mapper = invocation.getArgument(2);
                return Collections.singletonList(mapper.mapRow(mockResultSet, 1));
            });

        // Act
        List<FeedbackData> results = feedbackDao.getFeedbackByReportId(200L);

        // Assert
        assertFalse(results.isEmpty());
        assertEquals(1, results.size());
        assertEquals(2L, results.get(0).getFeedbackId());
        assertEquals(200L, results.get(0).getReportId());
        assertEquals("Report feedback", results.get(0).getFeedbackText());
        
        verify(jdbcTemplate).query(contains("SELECT * FROM FEEDBACK_DATA WHERE REPORT_ID = ?"), 
            eq(new Object[]{200L}), any(RowMapper.class));
    }

    @Test
    public void testGetAllFeedbackByFirmReference() throws SQLException {
        // Arrange - Mock ResultSet
        ResultSet mockResultSet = mock(ResultSet.class);
        // Configure first row
        when(mockResultSet.getLong(1, "FEEDBACK_ID")).thenReturn(1L);
        when(mockResultSet.getLong(1, "FIRM_DATA_ITEM_ID")).thenReturn(100L);
        when(mockResultSet.getString(1, "FEEDBACK_TEXT")).thenReturn("First feedback");
        
        // Configure second row
        when(mockResultSet.getLong(2, "FEEDBACK_ID")).thenReturn(2L);
        when(mockResultSet.getLong(2, "REPORT_ID")).thenReturn(200L);
        when(mockResultSet.getString(2, "FEEDBACK_TEXT")).thenReturn("Second feedback");
        
        when(namedParameterJdbcTemplate.query(anyString(), any(MapSqlParameterSource.class), any(RowMapper.class)))
            .thenAnswer(invocation -> {
                RowMapper<FeedbackData> mapper = invocation.getArgument(2);
                List<FeedbackData> results = Arrays.asList(
                    mapper.mapRow(mockResultSet, 1),
                    mapper.mapRow(mockResultSet, 2)
                );
                return results;
            });

        // Act
        List<FeedbackData> results = feedbackDao.getAllFeedbackByFirmReference("FR12345");

        // Assert
        assertEquals(2, results.size());
        assertEquals("First feedback", results.get(0).getFeedbackText());
        assertEquals("Second feedback", results.get(1).getFeedbackText());
        
        verify(namedParameterJdbcTemplate).query(contains("SELECT * FROM FEEDBACK_DATA WHERE FIRM_REFERENCE_NUMBER = :firmRef"), 
            namedParametersCaptor.capture(), any(RowMapper.class));
            
        MapSqlParameterSource params = namedParametersCaptor.getValue();
        assertEquals("FR12345", params.getValue("firmRef"));
    }

    // --------------- UPDATE OPERATIONS ---------------

    @Test
    public void testUpdateFeedback_Success() {
        // Arrange
        when(jdbcTemplate.update(anyString(), any(Object[].class))).thenReturn(1);

        // Act
        boolean result = feedbackDao.updateFeedback(testFeedbackData);

        // Assert
        assertTrue(result);
        verify(jdbcTemplate).update(contains("UPDATE FEEDBACK_DATA SET"), parametersCaptor.capture());
        
        Object[] capturedParams = parametersCaptor.getValue();
        // The last parameter should be the feedback ID for the WHERE clause
        assertEquals(testFeedbackData.getFeedbackId(), capturedParams[capturedParams.length - 1]);
    }

    @Test
    public void testUpdateFeedback_RecordNotFound() {
        // Arrange
        when(jdbcTemplate.update(anyString(), any(Object[].class))).thenReturn(0);

        // Act
        boolean result = feedbackDao.updateFeedback(testFeedbackData);

        // Assert
        assertFalse(result);
        verify(jdbcTemplate).update(contains("UPDATE FEEDBACK_DATA SET"), any(Object[].class));
    }

    // --------------- DELETE OPERATIONS ---------------

    @Test
    public void testDeleteFeedback_Success() {
        // Arrange
        when(jdbcTemplate.update(anyString(), eq(1L))).thenReturn(1);

        // Act
        boolean result = feedbackDao.deleteFeedback(1L);

        // Assert
        assertTrue(result);
        verify(jdbcTemplate).update(contains("DELETE FROM FEEDBACK_DATA WHERE FEEDBACK_ID = ?"), eq(1L));
    }

    @Test
    public void testDeleteFeedback_RecordNotFound() {
        // Arrange
        when(jdbcTemplate.update(anyString(), eq(999L))).thenReturn(0);

        // Act
        boolean result = feedbackDao.deleteFeedback(999L);

        // Assert
        assertFalse(result);
        verify(jdbcTemplate).update(contains("DELETE FROM FEEDBACK_DATA WHERE FEEDBACK_ID = ?"), eq(999L));
    }

    // --------------- TEST ROW MAPPER ---------------

    @Test
    public void testFeedbackRowMapper() throws SQLException {
        // Arrange
        ResultSet mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getLong("FEEDBACK_ID")).thenReturn(1L);
        when(mockResultSet.getLong("FIRM_DATA_ITEM_ID")).thenReturn(100L);
        when(mockResultSet.getObject("REPORT_ID")).thenReturn(null);
        when(mockResultSet.getString("FIRM_REFERENCE_NUMBER")).thenReturn("FR12345");
        when(mockResultSet.getString("HANDBOOK_REFERENCE")).thenReturn("HB-REF-001");
        when(mockResultSet.getString("FIRM_DATA_ITEM_NAME")).thenReturn("Test Handbook Item");
        when(mockResultSet.getString("FEEDBACK_TEXT")).thenReturn("This is test feedback");
        when(mockResultSet.getString("SUBMITTED_BY")).thenReturn("testUser");
        when(mockResultSet.getTimestamp("SUBMITTED_DATE")).thenReturn(currentTimestamp);

        // Get the row mapper using reflection
        RowMapper<FeedbackData> rowMapper = ReflectionTestUtils.invokeMethod(feedbackDao, "getFeedbackRowMapper");
        assertNotNull(rowMapper, "Row mapper should not be null");

        // Act
        FeedbackData result = rowMapper.mapRow(mockResultSet, 1);

        // Assert
        assertNotNull(result);
        assertEquals(1L, result.getFeedbackId());
        assertEquals(100L, result.getFirmDataItemId());
        assertEquals("FR12345", result.getFirmReferenceNumber());
        assertEquals("HB-REF-001", result.getHandBookReference());
        assertEquals("Test Handbook Item", result.getFirmDataItemName());
        assertEquals("This is test feedback", result.getFeedbackText());
        assertEquals("testUser", result.getSubmittedBy());
        assertEquals(currentTimestamp, result.getSubmittedDate());
    }

    // --------------- TRANSACTION TESTS ---------------

    @Test
    public void testSaveFeedbackBatch_Success() {
        // Arrange
        List<FeedbackData> feedbackList = Arrays.asList(
            testFeedbackData,
            createTestFeedback(2L, "Second feedback")
        );
        
        when(jdbcTemplate.batchUpdate(anyString(), any())).thenReturn(new int[]{1, 1});

        // Act
        boolean result = feedbackDao.saveFeedbackBatch(feedbackList);

        // Assert
        assertTrue(result);
        verify(jdbcTemplate).batchUpdate(contains("INSERT INTO FEEDBACK_DATA"), any());
    }

    @Test
    public void testSaveFeedbackBatch_PartialSuccess() {
        // Arrange
        List<FeedbackData> feedbackList = Arrays.asList(
            testFeedbackData,
            createTestFeedback(2L, "Second feedback")
        );
        
        when(jdbcTemplate.batchUpdate(anyString(), any())).thenReturn(new int[]{1, 0});

        // Act
        boolean result = feedbackDao.saveFeedbackBatch(feedbackList);

        // Assert
        assertFalse(result, "Should return false when not all items were saved");
        verify(jdbcTemplate).batchUpdate(contains("INSERT INTO FEEDBACK_DATA"), any());
    }

    // --------------- UTILITY METHODS ---------------

    private FeedbackData createTestFeedback(Long id, String feedbackText) {
        FeedbackData feedback = new FeedbackData();
        feedback.setFeedbackId(id);
        feedback.setFirmDataItemId(100L);
        feedback.setReportId(null);
        feedback.setFirmReferenceNumber("FR12345");
        feedback.setHandBookReference("HB-REF-001");
        feedback.setFirmDataItemName("Test Handbook Item");
        feedback.setFeedbackText(feedbackText);
        feedback.setSubmittedBy("testUser");
        feedback.setSubmittedDate(currentTimestamp);
        return feedback;
    }
}
